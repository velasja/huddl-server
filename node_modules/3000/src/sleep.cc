// sleep.cc
#include <unistd.h>
#include <node.h>

namespace demo {

using v8::Exception;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Object;
using v8::Number;
using v8::String;
using v8::Value;

void Sleep(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  if (args.Length() != 1) {
    // Throw an Error that is passed back to JavaScript
    isolate->ThrowException(Exception::TypeError(
        String::NewFromUtf8(isolate, "Wrong number of arguments, expect only "
                                     "one number argument of millisecond.")));
    return;
  }
  if (!args[0]->IsNumber()) {
    isolate->ThrowException(Exception::TypeError(String::NewFromUtf8(
        isolate, "Wrong arguments, expect a number of millisecond.")));
    return;
  }
  int d = usleep(1000 * args[0]->NumberValue());
  args.GetReturnValue().Set(Number::New(isolate, d));
}

void init(Local<Object> exports) { NODE_SET_METHOD(exports, "sleep", Sleep); }

NODE_MODULE(addon, init)

} // namespace demo
